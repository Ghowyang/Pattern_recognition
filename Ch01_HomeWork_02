{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "c0874cd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.linalg as sp_linalg\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "37e54d31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A0= \n",
      "[[ 1  2  3]\n",
      " [ 4  5  6]\n",
      " [ 7  8 10]]\n",
      "invP= \n",
      "[[ 1. -0. -0.]\n",
      " [ 4.  1. -0.]\n",
      " [ 7.  2.  1.]]\n",
      "A1= \n",
      "[[ 1.  2.  3.]\n",
      " [ 0. -3. -6.]\n",
      " [ 0.  0.  1.]]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "A0= np.array(\n",
    "    [[1, 2, 3],\n",
    "     [4, 5, 6],\n",
    "     [7, 8, 10]])\n",
    "\n",
    "A= A0.copy()\n",
    "\n",
    "assert A[0,0] !=0 # otherwise, rowChange(A,0)\n",
    "\n",
    "c10= -A[1,0]/A[0,0]\n",
    "P10= np.array(\n",
    "    [[1, 0, 0],\n",
    "     [c10, 1, 0],\n",
    "     [0, 0, 1]])\n",
    "\n",
    "A= P10@A\n",
    "\n",
    "\n",
    "c20= -A[2,0]/A[0,0]\n",
    "P20= np.array(\n",
    "    [[1, 0, 0],\n",
    "     [0, 1, 0],\n",
    "     [c20, 0, 1]])\n",
    "\n",
    "A= P20@A\n",
    "\n",
    "assert A[1,1] !=0  # otherwise, rowChange(A,1)\n",
    "\n",
    "c21= -A[2,1]/A[1,1]\n",
    "P21= np.array(\n",
    "    [[1, 0, 0],\n",
    "     [0, 1, 0],\n",
    "     [0, c21, 1]])\n",
    "A= P21@A\n",
    "\n",
    "A1= A\n",
    "\n",
    "P= P21@P20@P10\n",
    "invP= np.linalg.inv(P)\n",
    "\n",
    "print(f'''\n",
    "A0= \n",
    "{A0}\n",
    "invP= \n",
    "{invP}\n",
    "A1= \n",
    "{A1}   \n",
    "''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "9f9d9118",
   "metadata": {},
   "outputs": [],
   "source": [
    "A1= np.array(\n",
    "    [[1]])\n",
    "\n",
    "A2= np.array(\n",
    "    [[2,1],\n",
    "     [1,2]])\n",
    "\n",
    "A3= np.array(\n",
    "    [[3, 2, 1],\n",
    "     [2, 3, 2],\n",
    "     [1, 2, 3]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "04020d14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A= \n",
      "[[2 4]\n",
      " [5 7]]      \n",
      "detA= \n",
      "-5.999999999999998\n",
      "invA= \n",
      "[[-1.167  0.667]\n",
      " [ 0.833 -0.333]]\n",
      "A_invA= \n",
      "[[ 1. -0.]\n",
      " [ 0.  1.]]\n",
      "rankA= 2\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Create matrix using NumPy\n",
    "A= [[2,4],\n",
    "    [5,7]]\n",
    "\n",
    "A= np.array(A)\n",
    "\n",
    "# Find matrix det, inv, matrix rank, and matrix maultiplication\n",
    "\n",
    "\n",
    "detA=   np.linalg.det(A)\n",
    "invA=   np.linalg.inv(A)\n",
    "A_invA= A@invA\n",
    "\n",
    "rankA= np.linalg.matrix_rank(A)\n",
    "\n",
    "print(f'''\n",
    "A= \n",
    "{A}      \n",
    "detA= \n",
    "{detA}\n",
    "invA= \n",
    "{invA}\n",
    "A_invA= \n",
    "{A_invA}\n",
    "rankA= {rankA}\n",
    "''')\n",
    "\n",
    "assert np.allclose(\n",
    "    A_invA,\n",
    "    np.eye(A.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "88565d9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x= [-1.833  1.167]\n"
     ]
    }
   ],
   "source": [
    "b= [1,-1]\n",
    "b= np.array(b)\n",
    "\n",
    "x= np.linalg.solve(A, b)\n",
    "print(f'x= {x}')\n",
    "\n",
    "assert np.allclose(\n",
    "    A@x, \n",
    "    b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "028cc3a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "U= \n",
      "[[-0.459 -0.889]\n",
      " [-0.889  0.459]],\n",
      "σ= \n",
      "[9.676 0.62 ],\n",
      "V_T= \n",
      "[[-0.554 -0.833]\n",
      " [ 0.833 -0.554]]      \n",
      "\n"
     ]
    }
   ],
   "source": [
    "U,σ,V_T= np.linalg.svd(A)\n",
    "\n",
    "\n",
    "print(f'''\n",
    "U= \n",
    "{U},\n",
    "σ= \n",
    "{σ},\n",
    "V_T= \n",
    "{V_T}      \n",
    "''')\n",
    "\n",
    "assert np.allclose(\n",
    "    A,\n",
    "    U@np.diag(σ)@V_T\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "4b3dba0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A=\n",
      "[[2 4]\n",
      " [5 7]]\n",
      "λ= \n",
      "[-0.623  9.623],\n",
      "E= \n",
      "[[-0.836 -0.465]\n",
      " [ 0.548 -0.886]],   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "λ, E= np.linalg.eig(A)\n",
    "\n",
    "print(f'''\n",
    "A=\n",
    "{A}\n",
    "λ= \n",
    "{λ},\n",
    "E= \n",
    "{E},   \n",
    "''')\n",
    "\n",
    "assert np.allclose(\n",
    "    A,\n",
    "    E @ np.diag(λ) @ np.linalg.inv(E)\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "8370b159",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "B=\n",
      "[[29 43]\n",
      " [43 65]],\n",
      "λ1= \n",
      "[ 0.385 93.615],\n",
      "E1= \n",
      "[[-0.833 -0.554]\n",
      " [ 0.554 -0.833]],   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "B= A.T@A\n",
    "\n",
    "λ1, E1= np.linalg.eig(B)\n",
    "\n",
    "print(f'''\n",
    "B=\n",
    "{B},\n",
    "λ1= \n",
    "{λ1},\n",
    "E1= \n",
    "{E1},   \n",
    "''')\n",
    "\n",
    "assert np.allclose(\n",
    "    B,\n",
    "    E1 @ np.diag(λ1) @ np.linalg.inv(E1)\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "494b8ca4",
   "metadata": {},
   "outputs": [],
   "source": [
    "L= np.linalg.cholesky(A@A.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "d6e1d7bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'rnk': 2, 'det': 2.9999999999999996, 'inv': array([[ 0.667, -0.333],\n",
      "       [-0.333,  0.667]]), 'ch': array([[1.414, 0.   ],\n",
      "       [0.707, 1.225]]), 'qr': (array([[-0.894, -0.447],\n",
      "       [-0.447,  0.894]]), array([[-2.236, -1.789],\n",
      "       [ 0.   ,  1.342]])), 'eig': (array([3., 1.]), array([[ 0.707, -0.707],\n",
      "       [ 0.707,  0.707]])), 'svd': (array([[-0.707, -0.707],\n",
      "       [-0.707,  0.707]]), array([3., 1.]), array([[-0.707, -0.707],\n",
      "       [-0.707,  0.707]]))}\n"
     ]
    }
   ],
   "source": [
    "C= np.array(\n",
    "    [[2,1],\n",
    "     [1,2]])\n",
    "\n",
    "ans= {\n",
    "    'rnk':  np.linalg.matrix_rank(C),\n",
    "    'det':  np.linalg.det(C),\n",
    "    'inv':  np.linalg.inv(C),\n",
    "    'ch':   np.linalg.cholesky(C),\n",
    "    'qr':   np.linalg.qr(C),\n",
    "    'eig':  np.linalg.eig(C),\n",
    "    'svd':  np.linalg.svd(C)\n",
    "    }\n",
    "\n",
    "print(ans)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "7f5f8853",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'rnk': 3, 'det': 7.999999999999998, 'inv': array([[ 0.625, -0.5  ,  0.125],\n",
      "       [-0.5  ,  1.   , -0.5  ],\n",
      "       [ 0.125, -0.5  ,  0.625]]), 'ch': array([[1.732, 0.   , 0.   ],\n",
      "       [1.155, 1.291, 0.   ],\n",
      "       [0.577, 1.033, 1.265]]), 'qr': (array([[-0.802,  0.577,  0.154],\n",
      "       [-0.535, -0.577, -0.617],\n",
      "       [-0.267, -0.577,  0.772]]), array([[-3.742, -3.742, -2.673],\n",
      "       [ 0.   , -1.732, -2.309],\n",
      "       [ 0.   ,  0.   ,  1.234]])), 'eig': (array([6.372, 2.   , 0.628]), array([[-0.542, -0.707,  0.454],\n",
      "       [-0.643,  0.   , -0.766],\n",
      "       [-0.542,  0.707,  0.454]])), 'svd': (array([[-0.542,  0.707,  0.454],\n",
      "       [-0.643,  0.   , -0.766],\n",
      "       [-0.542, -0.707,  0.454]]), array([6.372, 2.   , 0.628]), array([[-0.542, -0.643, -0.542],\n",
      "       [ 0.707,  0.   , -0.707],\n",
      "       [ 0.454, -0.766,  0.454]]))}\n"
     ]
    }
   ],
   "source": [
    "C= np.array(\n",
    "    [[3,2,1],\n",
    "     [2,3,2],\n",
    "     [1,2,3]])\n",
    "\n",
    "ans= {\n",
    "    'rnk':  np.linalg.matrix_rank(C),\n",
    "    'det':  np.linalg.det(C),\n",
    "    'inv':  np.linalg.inv(C),\n",
    "    'ch':   np.linalg.cholesky(C),\n",
    "    'qr':   np.linalg.qr(C),\n",
    "    'eig':  np.linalg.eig(C),\n",
    "    'svd':  np.linalg.svd(C)\n",
    "    }\n",
    "\n",
    "print(ans)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "74760af8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "n= \n",
      "3, \n",
      "A= \n",
      "[[ 0 -5 -2]\n",
      " [-2  2  4]\n",
      " [-2  0 -3]]\n",
      "b= \n",
      "[[0]\n",
      " [3]\n",
      " [4]]\n",
      "x= \n",
      "[[-1.758]\n",
      " [ 0.065]\n",
      " [-0.161]]\n",
      "\n",
      "\n",
      "n= \n",
      "3, \n",
      "A= \n",
      "[[ 0 -5 -2]\n",
      " [-2  2  4]\n",
      " [-2  0 -3]]\n",
      "invA=\n",
      "[[-0.097 -0.242 -0.258]\n",
      " [-0.226 -0.065  0.065]\n",
      " [ 0.065  0.161 -0.161]]\n",
      "b= \n",
      "[[0]\n",
      " [3]\n",
      " [4]]\n",
      "x1= \n",
      "[[-1.758]\n",
      " [ 0.065]\n",
      " [-0.161]]\n",
      "\n",
      "[[ True]\n",
      " [ True]\n",
      " [ True]]\n",
      "[[ True]\n",
      " [ True]\n",
      " [ True]]\n",
      "A= \n",
      "[[ 0 -5 -2 -2]\n",
      " [ 2  4 -2  0]\n",
      " [-3 -1  2  1]\n",
      " [ 3  3 -4  1]]\n",
      "det= -63.99999999999998\n",
      "det= -64.00000000000003\n",
      "det= -63.99999999999998\n",
      "det= -64\n",
      "A= \n",
      "[[ 0 -5 -2 -2]\n",
      " [ 2  4 -2  0]\n",
      " [-3 -1  2  1]\n",
      " [ 3  3 -4  1]]\n",
      "i= 0, Bi= \n",
      "[[ 2  4 -2  0]\n",
      " [-3 -1  2  1]\n",
      " [ 3  3 -4  1]]\n",
      "i,j= 00, Bij= \n",
      "[[ 4 -2  0]\n",
      " [-1  2  1]\n",
      " [ 3 -4  1]]\n",
      ".... Dij= 16.000000000000007\n",
      "i,j= 01, Bij= \n",
      "[[ 2 -2  0]\n",
      " [-3  2  1]\n",
      " [ 3 -4  1]]\n",
      ".... Dij= -6.66133814775094e-16\n",
      "i,j= 02, Bij= \n",
      "[[ 2  4  0]\n",
      " [-3 -1  1]\n",
      " [ 3  3  1]]\n",
      ".... Dij= 16.000000000000007\n",
      "i,j= 03, Bij= \n",
      "[[ 2  4 -2]\n",
      " [-3 -1  2]\n",
      " [ 3  3 -4]]\n",
      ".... Dij= -16.000000000000007\n",
      "det= -64.00000000000003\n",
      "A= \n",
      "[[ 0 -5 -2 -2]\n",
      " [ 2  4 -2  0]\n",
      " [-3 -1  2  1]\n",
      " [ 3  3 -4  1]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[ 4 -2  0]\n",
      " [-1  2  1]\n",
      " [ 3 -4  1]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[ 2  1]\n",
      " [-4  1]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[1]]\n",
      ".... Dij= 1\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[-4]]\n",
      ".... Dij= -4\n",
      ".... Dij= 6\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[-1  1]\n",
      " [ 3  1]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[1]]\n",
      ".... Dij= 1\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      ".... Dij= -4\n",
      "\n",
      "i,j= 02, Bij= \n",
      "[[-1  2]\n",
      " [ 3 -4]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[-4]]\n",
      ".... Dij= -4\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      ".... Dij= -2\n",
      ".... Dij= 16\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[ 2 -2  0]\n",
      " [-3  2  1]\n",
      " [ 3 -4  1]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[ 2  1]\n",
      " [-4  1]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[1]]\n",
      ".... Dij= 1\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[-4]]\n",
      ".... Dij= -4\n",
      ".... Dij= 6\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[-3  1]\n",
      " [ 3  1]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[1]]\n",
      ".... Dij= 1\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      ".... Dij= -6\n",
      "\n",
      "i,j= 02, Bij= \n",
      "[[-3  2]\n",
      " [ 3 -4]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[-4]]\n",
      ".... Dij= -4\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      ".... Dij= 6\n",
      ".... Dij= 0\n",
      "\n",
      "i,j= 02, Bij= \n",
      "[[ 2  4  0]\n",
      " [-3 -1  1]\n",
      " [ 3  3  1]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[-1  1]\n",
      " [ 3  1]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[1]]\n",
      ".... Dij= 1\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      ".... Dij= -4\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[-3  1]\n",
      " [ 3  1]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[1]]\n",
      ".... Dij= 1\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      ".... Dij= -6\n",
      "\n",
      "i,j= 02, Bij= \n",
      "[[-3 -1]\n",
      " [ 3  3]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      ".... Dij= -6\n",
      ".... Dij= 16\n",
      "\n",
      "i,j= 03, Bij= \n",
      "[[ 2  4 -2]\n",
      " [-3 -1  2]\n",
      " [ 3  3 -4]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[-1  2]\n",
      " [ 3 -4]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[-4]]\n",
      ".... Dij= -4\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      ".... Dij= -2\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[-3  2]\n",
      " [ 3 -4]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[-4]]\n",
      ".... Dij= -4\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      ".... Dij= 6\n",
      "\n",
      "i,j= 02, Bij= \n",
      "[[-3 -1]\n",
      " [ 3  3]]\n",
      "\n",
      "i,j= 00, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      "\n",
      "i,j= 01, Bij= \n",
      "[[3]]\n",
      ".... Dij= 3\n",
      ".... Dij= -6\n",
      ".... Dij= -16\n",
      "\n",
      "det= -64\n",
      "A= \n",
      "[[ 1 -1]\n",
      " [ 1  1]], \n",
      "S= \n",
      "[[2 0]\n",
      " [0 1]], \n",
      "B= \n",
      "[[3 1]\n",
      " [1 3]]\n"
     ]
    }
   ],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "Ch01: Linear Algebra\n",
    "Created on Sat Sep 25 17:36:35 2021\n",
    "@author: renyu\n",
    "\"\"\"\n",
    "\n",
    "x= 1\n",
    "y= 1.0\n",
    "z= 1+1j\n",
    "#%%\n",
    "aList= [1,2,3]\n",
    "aSet=  {10,20,30}\n",
    "aDict= {'a':1, 'b':2, 'c':3}\n",
    "#%%\n",
    "import numpy as np\n",
    "\n",
    "v= [10, 20, 30]\n",
    "v= np.array(v)\n",
    "\n",
    "\n",
    "A= [[1, 2, 3],\n",
    "    [4, 5, 6]]\n",
    "\n",
    "A= np.array(A)\n",
    "#%%\n",
    "v1= [10, 20, 30]\n",
    "v2= [40, 50, 60]\n",
    "\n",
    "v1= np.array(v1)\n",
    "v2= np.array(v2)\n",
    "#%%\n",
    "B= np.arange(2*3*4)\n",
    "#%%\n",
    "B= B.reshape(2,3,4)\n",
    "\n",
    "#%%\n",
    "import sympy as sy\n",
    "x,y,z= sy.symbols('x,y,z')\n",
    "\n",
    "from sympy import MatrixSymbol, Matrix\n",
    "\n",
    "#%%\n",
    "# Solve linear equations\n",
    "########################\n",
    "\n",
    "A= [[1,-2],\n",
    "    [2, 1]]\n",
    "A= np.array(A)\n",
    "\n",
    "b= [1,7]\n",
    "b= np.array(b)\n",
    "b= b.reshape(2,1)\n",
    "\n",
    "#[sol]\n",
    "x= np.linalg.solve(A,b)\n",
    "\n",
    "# 驗算\n",
    "A@x == b \n",
    "np.isclose(A@x, b) \n",
    "#%%\n",
    "\n",
    "# [sol2[]\n",
    "\n",
    "x1= np.linalg.inv(A) @ b\n",
    "\n",
    "# 驗算\n",
    "A@x1 == b\n",
    "np.isclose(A@x1, b) \n",
    "\n",
    "#%%\n",
    "# n 變數 線性方程組\n",
    "\n",
    "n= 3 #np.random.randint(2,10)\n",
    "\n",
    "np.random.seed(0)\n",
    "A= np.random.randint(-5,5,size=(n,n))\n",
    "\n",
    "np.random.seed(1)\n",
    "b= np.random.randint(-5,5,size=(n,1))\n",
    "\n",
    "x= np.linalg.solve(A, b)\n",
    "\n",
    "print(\n",
    "f'''\n",
    "n= \n",
    "{n}, \n",
    "A= \n",
    "{A}\n",
    "b= \n",
    "{b}\n",
    "x= \n",
    "{x}\n",
    "''')\n",
    "#%%\n",
    "\n",
    "invA= np.linalg.inv(A)\n",
    "\n",
    "x1= invA @ b\n",
    "\n",
    "print(\n",
    "f'''\n",
    "n= \n",
    "{n}, \n",
    "A= \n",
    "{A}\n",
    "invA=\n",
    "{invA}\n",
    "b= \n",
    "{b}\n",
    "x1= \n",
    "{x1}\n",
    "''')\n",
    "\n",
    "#%%\n",
    "# 驗算\n",
    "validation= np.isclose(A@x, b)\n",
    "print(validation)\n",
    "\n",
    "validation= np.isclose(A@x1, b)\n",
    "print(validation)\n",
    "#%%\n",
    "# HomeWork:\n",
    "# 自己寫一個遞迴式的 function，來計算 Determinant \n",
    "\n",
    "\n",
    "n= 4 \n",
    "\n",
    "np.random.seed(0)\n",
    "A= np.random.randint(-5,5,size=(n,n))\n",
    "print(f'A= \\n{A}')\n",
    "\n",
    "det= np.linalg.det(A)\n",
    "print(f'det= {det}')\n",
    "\n",
    "#%%\n",
    "# Determinant\n",
    "\n",
    "i= 0\n",
    "det= 0\n",
    "for j in range(n):\n",
    "    Bi=  np.delete(A, i, axis=0)\n",
    "    Bij= np.delete(Bi,j, axis=1)\n",
    "    Bij= np.linalg.det(Bij)\n",
    "    Aij= A[i,j]*Bij*(-1)**(i+j)\n",
    "    det += Aij\n",
    "print(f'det= {det}')\n",
    "\n",
    "#%%\n",
    "\n",
    "j= 0\n",
    "det= 0\n",
    "for i in range(n):\n",
    "    Bj=  np.delete(A, j, axis=1)\n",
    "    Bij= np.delete(Bj,i, axis=0)\n",
    "    Bij= np.linalg.det(Bij)\n",
    "    Aij= A[i,j]*Bij*(-1)**(i+j)\n",
    "    det += Aij\n",
    "print(f'det= {det}')\n",
    "\n",
    "#%%\n",
    "\n",
    "# when n is large, it is very slow!!\n",
    "\n",
    "def ryDet(A):\n",
    "    \n",
    "    n= A.shape[0]\n",
    "    if n>1:\n",
    "        i= 0\n",
    "        det= 0\n",
    "        for j in range(n):\n",
    "            Bi=  np.delete(A, i, axis=0)\n",
    "            Bij= np.delete(Bi,j, axis=1)\n",
    "            \n",
    "            Bij= ryDet(Bij) #np.linalg.det(Bij)\n",
    "            \n",
    "            Aij= A[i,j]*Bij*(-1)**(i+j)\n",
    "            det += Aij\n",
    "        #print(f'det= {det}')\n",
    "        return det\n",
    "    \n",
    "    elif A.shape[0]==1:\n",
    "        det= A[0,0]\n",
    "        return det\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "det= ryDet(A)\n",
    "print(f'det= {det}')\n",
    "#%%\n",
    "\n",
    "#%%\n",
    "\n",
    "print(f'A= \\n{A}')\n",
    "\n",
    "i= 0\n",
    "Bi=  np.delete(A, i, axis=0)\n",
    "print(f'i= {i}, Bi= \\n{Bi}')\n",
    "\n",
    "det= 0\n",
    "for j in range(n):    \n",
    "    Bij= np.delete(Bi,j, axis=1)\n",
    "    print(f'i,j= {i}{j}, Bij= \\n{Bij}')\n",
    "    Dij= np.linalg.det(Bij)\n",
    "    print(f'.... Dij= {Dij}')\n",
    "    Cij= A[i,j]*Dij*(-1)**(i+j)\n",
    "    det += Cij\n",
    "\n",
    "print(f'det= {det}')\n",
    "\n",
    "#%%\n",
    "# when n is large, it is very slow!!\n",
    "\n",
    "print(f'A= \\n{A}')\n",
    "\n",
    "def ryDet(A):\n",
    "    \n",
    "    n= A.shape[0]\n",
    "    if n>1:\n",
    "        i= 0\n",
    "        Bi=  np.delete(A, i, axis=0)\n",
    "        #print(f'\\ni= {i}, Bi= \\n{Bi}')\n",
    "        \n",
    "        det= 0\n",
    "        for j in range(n):\n",
    "            \n",
    "            Bij= np.delete(Bi,j, axis=1)\n",
    "            print(f'\\ni,j= {i}{j}, Bij= \\n{Bij}')\n",
    "            \n",
    "            Dij= ryDet(Bij) #np.linalg.det(Bij)\n",
    "            print(f'.... Dij= {Dij}')\n",
    "            \n",
    "            Cij= A[i,j]*Dij*(-1)**(i+j)\n",
    "            det += Cij\n",
    "        #print(f'det= {det}')\n",
    "        return det\n",
    "    \n",
    "    elif A.shape[0]==1:\n",
    "        det= A[0,0]\n",
    "        return det\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "det= ryDet(A)\n",
    "print(f'\\ndet= {det}')\n",
    "#%%\n",
    "\n",
    "import scipy.linalg\n",
    "\n",
    "A= [[4,3],\n",
    "    [6,3]]\n",
    "\n",
    "'''\n",
    "A= [[12, -51, 4], \n",
    "    [6, 167, -68],\n",
    "    [-4, 24, -41]]\n",
    "'''\n",
    "\n",
    "A= np.array(A)\n",
    "\n",
    "P,L,U= scipy.linalg.lu(A)\n",
    "\n",
    "# 驗算\n",
    "P @ L @ U == A\n",
    "np.isclose(P @ L @ U , A)\n",
    "np.allclose(P @ L @ U , A)\n",
    "\n",
    "#%%\n",
    "Q,R= scipy.linalg.qr(A)\n",
    "\n",
    "# 驗算\n",
    "(Q @ R == A).all()\n",
    "\n",
    "np.allclose(Q @ R , A)\n",
    "\n",
    "# 再檢查 Q 的正交性質\n",
    "#assert Q[0]@Q[1] == 0\n",
    "#assert Q[0]@Q[0] == 1\n",
    "assert np.allclose(Q[0]@Q[1] , 0)\n",
    "assert np.allclose(Q[0]@Q[0] , 1)\n",
    "\n",
    "#%%\n",
    "λ, Q= scipy.linalg.eig(A)\n",
    "\n",
    "lmbd= λ \n",
    "# 驗算\n",
    "#assert A @ Q[:,0] == Q[:,0] * λ[0]\n",
    "\n",
    "assert np.allclose(A @ Q[:,0], Q[:,0] * λ[0] )\n",
    "\n",
    "assert np.allclose(A @ Q, Q @ np.diag(λ) )\n",
    "#%%\n",
    "U, σ, V_T= scipy.linalg.svd(A)\n",
    "\n",
    "V= V_T.T\n",
    "\n",
    "Σ= np.diag(σ)\n",
    "\n",
    "sigma= σ\n",
    "Sigma= Σ \n",
    "\n",
    "# 驗算\n",
    "\n",
    "assert np.allclose(U @  Σ @ V.T, A )\n",
    "\n",
    "# 再檢查 U, V 的正交性質\n",
    "\n",
    "assert np.allclose(U[0]@U[1] , 0)\n",
    "assert np.allclose(V[0]@V[1] , 0)\n",
    "assert np.allclose(U[0]@U[0] , 1)\n",
    "assert np.allclose(V[0]@V[0] , 1)\n",
    "\n",
    "#\n",
    "# 檢查 orthogonal , orthonormal\n",
    "#\n",
    "assert np.allclose(U@U.T, np.eye(U.shape[0]))\n",
    "assert np.allclose(V@V.T, np.eye(V.shape[0]))\n",
    "\n",
    "#\n",
    "assert np.allclose(A  @V, U@Σ)\n",
    "assert np.allclose(A.T@U, V@Σ)\n",
    "\n",
    "#%%\n",
    "import numpy as np\n",
    "import scipy.linalg as sp_linalg\n",
    "\n",
    "M= [[1,2],\n",
    "    [3,4]]\n",
    "M= np.array(M)\n",
    "U,sigma,V_T= np.linalg.svd(M)\n",
    "V= V_T.T\n",
    "MtM= M.T@M\n",
    "ld, Q= np.linalg.eig(MtM)\n",
    "#%%\n",
    "\n",
    "A= [[12, -51, 4], \n",
    "    [6, 167, -68],\n",
    "    [-4, 24, -41]]\n",
    "A= np.array(A)\n",
    "Q,R= np.linalg.qr(A)\n",
    "\n",
    "#%%\n",
    "A= [[2,1],\n",
    "    [1,2]]\n",
    "A= np.array(A)\n",
    "lmda, eigV= np.linalg.eig(A)\n",
    "#%%\n",
    "\n",
    "Q, R= np.linalg.qr(A)\n",
    "\n",
    "#%%\n",
    "U,Sigma,V_T= np.linalg.svd(A)\n",
    "V= V_T.T\n",
    "\n",
    "#%%\n",
    "A= [[1,-1],\n",
    "    [1,1]]\n",
    "A= np.array(A)\n",
    "S= np.diag([2,1])\n",
    "B= A@S@A.T\n",
    "\n",
    "print(f'A= \\n{A}, \\nS= \\n{S}, \\nB= \\n{B}')\n",
    "#%%\n",
    "lmda, eigV= np.linalg.eig(B)\n",
    "Q, R= np.linalg.qr(B)\n",
    "U,Sigma,V_T= np.linalg.svd(B)\n",
    "V= V_T.T\n",
    "\n",
    "#%%\n",
    "\n",
    "A= [[10,1],\n",
    "    [1,10]]\n",
    "A= np.array(A)\n",
    "\n",
    "lmda, eigV= np.linalg.eig(A)\n",
    "\n",
    "#%%\n",
    "\n",
    "A= [[1,1],\n",
    "    [0,1]]\n",
    "A= np.array(A)\n",
    "\n",
    "lmda, eigV= np.linalg.eig(A)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#%%\n",
    "\n",
    "A= [[4,1],\n",
    "    [1,4]]\n",
    "A= np.array(A)\n",
    "\n",
    "X= [[1,0,1,-1,-1,-1],\n",
    "    [0,1,1,+1,-1,+1]]\n",
    "X= np.array(X)\n",
    "\n",
    "Y= A@X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e245e680",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
